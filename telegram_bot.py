import random
import sqlite3

from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils import executor

import db_session
from main import load_user
from news import News
from users import User

TOKEN = '5330961932:AAE4raRPL_4YWvhoszimBDRL8dODuL6K6FE'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
game = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ö–∞–º–µ–Ω—å üóø")
        ],
        [
            KeyboardButton(text="–ù–æ–∂–Ω–∏—Ü—ã ‚úÇ"),
            KeyboardButton(text="–ë—É–º–∞–≥–∞ üìÉ"),
        ],
        [
            KeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É..")
        ],
    ],
    resize_keyboard=True
)

game1 = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–î–∞"),
            KeyboardButton(text="–ù–µ—Ç"),
        ],
    ],
    resize_keyboard=True
)
game2 = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="/game"),
        ],
    ],
    resize_keyboard=True
)


async def set_default_commands(dp):
    await dp.bot.set_my_commands([
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("help", "–ü–æ–º–æ—â—å"),
        types.BotCommand("game", "–ú–∏–Ω–∏-–∏–≥—Ä—É—à–∫–∞"),
        types.BotCommand("add_id", "–ú–∏–Ω–∏-–∏–≥—Ä—É—à–∫–∞"),
        types.BotCommand("register", "–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        types.BotCommand("show_news", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"),
    ])


class Game(StatesGroup):
    q1 = State()
    q2 = State()


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!')


@dp.message_handler(commands=['help'])
async def help(msg: types.Message):
    await bot.send_message(msg.from_user.id,
                           f'~~–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –Ø –±–æ—Ç —Å–∞–π—Ç–∞ Requiem~~\n\n'
                           f'¬∞ - "/show_news" - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏,\n'
                           f'¬∞ - "/add_news"- –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è) \n'
                           f'¬∞ - "/register" - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –Ω–∞—à–µ–π —Å–æ—Ü-—Å–µ—Ç–∏ –ø—Ä–∏–º–∏–∫–æ–º –∏–∑ –±–æ—Ç–∞\n'
                           f'¬∞ - "/add_id" - –¥–æ–±–∞–≤–∏—Ç—å id —É–∂–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É\n'
                           f'¬∞ - "/info" - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ\n'
                           f'~~~~~~~~~~~~~~~~')


@dp.message_handler(commands=['info'])
async def info(msg: types.Message):
    db_sess = db_session.create_session()
    user = db_sess.query(User).filter(User.name_in_telega == msg.from_user.id).first()
    if user:
        if user.img:
            photo = open(f'app2/static/img/{user.img}', 'rb')
        else:
            photo = open(f'app2/static/img/cat.jpg', 'rb')
        await bot.send_photo(msg.from_user.id, caption=f"–Ω–∏–∫-{user.name}\n"
                                                       f"id –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º-{user.name_in_telega}\n", photo=photo)

    else:
        await bot.send_message(msg.from_user.id, f"–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è —è –≤–∞—Å –Ω–µ –Ω–∞—à—ë–ª"
                                                 f"")


@dp.message_handler(commands=['add_id'])
async def add_id(msg: types.Message):
    try:
        text = msg.text[9:-1].split(']-[')
        if len(text) == 2:
            db_sess = db_session.create_session()
            user = db_sess.query(User).filter(User.name == text[0]).first()
            if user:
                if user.check_password(text[1]):
                    user.name_in_telega = msg.from_user.id
                    db_sess.commit()
                    await bot.send_message(msg.from_user.id, "–í—Å—ë —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                else:
                    await bot.send_message(msg.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            else:
                await bot.send_message(msg.from_user.id, "–¢–∞–∫–æ–≥–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            await bot.send_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –ø–æ –ø—Ä–∏–º–µ—Ä—É /add_id [–∏–º—è]-[–ø–∞—Ä–æ–ª—å]")
    except Exception:
        await bot.send_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–π –ø–æ –ø—Ä–∏–º–µ—Ä—É /add_id [–∏–º—è]-[–ø–∞—Ä–æ–ª—å]")


@dp.message_handler(commands=['show_news'])
async def show_news(msg: types.Message):
    try:
        con = sqlite3.connect("app2/db/blogs.db", check_same_thread=False)
        cur = con.cursor()
        news = cur.execute(
            f"SELECT (SELECT name FROM users WHERE id = user_id), "
            f"created_date, title, content, img FROM news ORDER BY id DESC LIMIT 10").fetchall()
        con.close()
        for new in news:
            if not new[4]:
                await bot.send_message(msg.from_user.id, f"~~~~~~~-Requiem-~~~~~~~\n\n"
                                                         f"¬∞ - –ê–≤—Ç–æ—Ä –∑–∞–ø–∏—Å–∏: {new[0]}- ¬∞\n¬∞ - –î–∞—Ç–∞: {new[1][:-10]} - ¬∞\n"
                                                         f"--------------–ó–∞–≥–æ–ª–æ–≤–æ–∫-----------------\n"
                                                         f"{new[2]}\n"
                                                         f"--------------–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ--------------\n"
                                                         f"{new[3]}")
            else:
                photo = open(f'app2/static/img_news/{new[4]}', 'rb')
                await bot.send_photo(msg.from_user.id, caption=f"~~~~~~~-Requiem-~~~~~~~\n\n"
                                                               f"¬∞ - –ê–≤—Ç–æ—Ä –∑–∞–ø–∏—Å–∏: {new[0]}- ¬∞\n¬∞ - –î–∞—Ç–∞: {new[1][:-10]} - ¬∞\n"
                                                               f"--------------–ó–∞–≥–æ–ª–æ–≤–æ–∫-----------------\n"
                                                               f"{new[2]}\n"
                                                               f"--------------–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ--------------\n"
                                                               f"{new[3]}", photo=photo)
    except TypeError:
        await bot.send_message(msg.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


@dp.message_handler(commands=['add_news'])  # –î–û–ü–ò–õ–ò–¢–¨ –í–´–í–û–î –°–û–û–ë–©–ï–ù–ò–Ø –ï–°–õ–ò –ù–ï–¢–£ –°–û–û–ë–©–ï–ù–ò–Ø
async def add_news(msg: types.Message):
    text = msg.text[11:-1].split(']-[')
    db_sess = db_session.create_session()
    user = db_sess.query(User).filter(User.name_in_telega == msg.from_user.id).first()
    try:
        load_user(user.id)
        news = News()
        news.title = text[1]
        news.category_id = text[0]
        news.content = text[2]
        news.is_private = False
        user.news.append(news)
        db_sess.merge(user)
        db_sess.commit()
        await bot.send_message(msg.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ—Å—Ç—å! –ï—Å–ª–∏ –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å"
                                                 "–±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –Ω–∞–º –Ω–∞ —Å–∞–π—Ç")
    except Exception:
        await bot.send_message(msg.from_user.id,
                               f"~~~~~~~-Requiem-~~~~~~~\n"
                               f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                               f'"/add_news [–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–∏]-[–ó–∞–≥–æ–ª–æ–≤–æ–∫]-[–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ]\n"'
                               f'–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:\n'
                               f'1 - –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ \n'
                               f'2 - –ú–∏—Ä \n'
                               f'3 - –ù–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏ \n'
                               f'4 - –î–ª—è –î–µ—Ç–µ–π \n'
                               f'5 - –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n\n'
                               f'**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: \n'
                               f'–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–æ—Ü-—Å–µ—Ç–∏.\n'
                               f'–ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã - /register.\n'
                               f"~~~~~~~~~~~~~~")


@dp.message_handler(commands=['register'])
async def register(msg: types.Message):
    text = msg.text[11:-1].split(']-[')

    if len(text) == 3 and text[1] == text[2]:
        db_sess = db_session.create_session()
        if db_sess.query(User).filter(User.name == text[0]).first():
            await bot.send_message(msg.from_user.id, "–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å")
        else:
            user = User(
                name=text[0],
                name_in_telega=msg.from_user.id,
            )
            user.set_password(text[2])
            db_sess.add(user)
            db_sess.commit()
            await bot.send_message(msg.from_user.id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    else:
        await bot.send_message(msg.from_user.id, f"~~~~~~~-Requiem-~~~~~~~\n"
                                                 f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                                 f'"/register [–ù–∏–∫]-[–ü–∞—Ä–æ–ª—å]-[–ï—â–µ —Ä–∞–∑ –ø–∞—Ä–æ–ª—å]"'
                                                 f"~~~~~~~~~~~~~~")


@dp.message_handler(commands=["game"])
async def register(msg: types.Message):
    await bot.send_message(msg.from_user.id, "-.-.-.-.-.-.-.-.-–ò–ì–†–ê-.-.-.-.-.-.-.-.- \n"
                                             "–ö–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã\–±—É–º–∞–≥–∞ \n \n"
                                             "–î–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä..", reply_markup=game)
    await Game.q1.set()


@dp.message_handler(state=Game.q1)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    bot = ""
    comp = str(random.randint(1, 3))  # 1 - –ö–∞–º–µ–Ω—å, 2 - –ù–æ–∂–Ω–∏—Ü—ã, 3 - –ë—É–º–∞–≥–∞
    if comp == "1":
        bot = "–ö–∞–º–µ–Ω—å üóø"
    elif comp == "2":
        bot = "–ù–æ–∂–Ω–∏—Ü—ã ‚úÇÔ∏è"
    elif comp == "3":
        bot = "–ë—É–º–∞–≥—É üìÉ"
    if answer == "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É..":
        await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    elif answer == "–ö–∞–º–µ–Ω—å üóø" and comp == "1":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –ù–∏—á—å—è! :/ -=-=-=-=-=- \n \n")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ö–∞–º–µ–Ω—å üóø" and comp == "2":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! :D -=-=-=-=-=-")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ö–∞–º–µ–Ω—å üóø" and comp == "3":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –ü—Ä–æ–∏–≥—Ä—ã—à :( -=-=-=-=-=-")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ù–æ–∂–Ω–∏—Ü—ã ‚úÇ" and comp == "1":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –ü—Ä–æ–∏–≥—Ä—ã—à :( -=-=-=-=-=-")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ù–æ–∂–Ω–∏—Ü—ã ‚úÇ" and comp == "2":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –ù–∏—á—å—è! :/ -=-=-=-=-=- \n \n")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ù–æ–∂–Ω–∏—Ü—ã ‚úÇ" and comp == "3":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! :D -=-=-=-=-=-")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ë—É–º–∞–≥–∞ üìÉ" and comp == "1":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! :D -=-=-=-=-=-")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ë—É–º–∞–≥–∞ üìÉ" and comp == "2":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –ü—Ä–æ–∏–≥—Ä—ã—à :( -=-=-=-=-=-")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    elif answer == "–ë—É–º–∞–≥–∞ üìÉ" and comp == "3":
        await message.answer(f"–ü–µ–ª—å–º–µ—à –≤—ã–±—Ä–∞–ª - {bot} \n \n"
                             "-=-=-=-=-=- –ù–∏—á—å—è! :/ -=-=-=-=-=- \n \n")
        await message.answer("–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?", reply_markup=game1)
        await Game.next()

        @dp.message_handler(state=Game.q2)
        async def answer_q1(message: types.Message, state: FSMContext):
            if message.text == "–ù–µ—Ç":
                await message.answer("By, by.. –ñ–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞)", reply_markup=ReplyKeyboardRemove())
                await state.reset_state()
            else:
                await state.reset_state()
                await message.answer("–û–∫–µ–π", reply_markup=game2)
    else:
        await message.answer("–ñ–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!!")


@dp.message_handler(content_types=['text'])
async def main(msg: types.Message):
    await bot.send_message(msg.from_user.id, "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É, —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ\n"
                                             "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")


if __name__ == '__main__':
    db_session.global_init("app2/db/blogs.db")

    executor.start_polling(dp)
